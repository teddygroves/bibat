.. _getting_started:

===============
Getting started
===============

Installation
============

You can install bibat like this (make sure you are in a Python environment where
you would like to install bibat):

.. code:: sh

    $ pip install bibat

To install the latest version of bibat from GitHub:

.. code:: sh

    $ pip install git+https://github.com/teddygroves/bibat.git@main

Usage
=====

Bibat is intended to be used from the command line like this:

.. code:: shell

    $ bibat

Running this command will trigger a command line wizard. After following the
wizard's instructions, a new directory will be created that implements a simple
statistical analysis. To try out the example analysis, run the following
command from the root of the new directory:

.. code:: shell

    $ make analysis

If you already know how you are going to answer the wizard's questions, you can
put your answers in a json file with relative path `my_json_file.json` and run
bibat like this:

.. code:: shell

    $ bibat --config_file=my_json_file.json

See `bibat's cookiecutter schema
<https://github.com/teddygroves/bibat/blob/main/bibat/cookiecutter.json>`_ for
the information you need to create a suitable json file. You can use bibat to
start your statistical analysis project like this:


.. _dependencies:

Dependencies
============

Bibat's dependencies fall into two categories: a few that are required by bibat
itself, and some more that are required in order to run the analyses that bibat
generates.

Dependencies required by bibat
------------------------------

Bibat requires Python version 3.9 or greater.

Bibat's other dependencies are all Python packages. These can be found in
bibat's `pyproject.toml file
<https://github.com/teddygroves/bibat/blob/main/pyproject.toml>`_.

The following packages are required in order to run bibat and are installed
automatically when you run :code:`pip install bibat`:

- cookiecutter
- click
- pydantic


Bibat also has the following development dependencies, which can be installed
by running :code:`pip install bibat'[development]'`:

- black
- isort
- pre-commit
- pytest
- tox
- codecov
- pytest-cov
- sphinx
- sphinx-click
- pydata_sphinx_theme


Target project dependencies: Python
-----------------------------------

Projects generated by bibat have their Python dependencies listed in the file
:code:`pyproject.toml`.  The cookiecutter template that generates this file can
be found `here
<https://github.com/teddygroves/bibat/blob/main/bibat/%7B%7Bcookiecutter.repo_name%7D%7D/pyproject.toml>`_.
These packages will be installed when you run :code:`make env` or `make
analysis` and are as follows:

- arviz
- black
- cmdstanpy
- jupyter
- numpy
- pandas
- pandera
- pydantic
- pytest
- scipy
- scikit-learn
- toml

In addition, the following Python packages may be installed, depending on how
the user answers bibat's wizard:

- sphinx

Target project dependencies: Cmdstan
------------------------------------

Bibat will attempt to install `cmdstan
<https://mc-stan.org/docs/cmdstan-guide/index.html>`_, the command line
interface to Stan, when you run the commands :code:`make env` or :code:`make
analysis` from the root of the target project.

If bibat fails to install cmdstan, please raise an issue! The `cmdstan
installation instructions
<https://mc-stan.org/docs/cmdstan-guide/cmdstan-installation.html>`_ and `the
relevant section of the cmdstanpy documentation
<https://cmdstanpy.readthedocs.io/en/v1.1.0/installation.html#cmdstan-installation>`_
might also be useful.

Target project dependencies: Quarto
-----------------------------------

Bibat supports automatic generation of documentation using either Sphinx or
`Quarto <https://quarto.org/>`_. Whereas bibat will install Sphinx
automatically, Quarto must be installed manually: see the `quarto
documnentation <https://quarto.org/docs/get-started/>`_ for instructions.
