@misc{drivendataCookiecutterdatascience2022,
  title = {Cookiecutter-Data-Science},
  author = {{Driven Data}},
  year = {2022},
  url = {https://github.com/drivendata/cookiecutter-data-science/}
}

@misc{salemTensorflowProjectTemplate2018,
  title = {Tensorflow-{{Project-Template}}},
  author = {Salem, Mahmoud G},
  year = {2018},
  url = {https://github.com/MrGemy95/Tensorflow-Project-Template}
}

@misc{huangPytorchtemplate2020,
  title = {Pytorch-Template},
  author = {Huang, Victor},
  year = {2020},
  url = {https://github.com/victoresque/pytorch-template}
}

@misc{cookiecutter-cmsdevelopersCookiecuttercmsCookiecutterComputational2022,
  title = {Cookiecutter-Cms: {{Cookiecutter}} for {{Computational Molecular Sciences}}},
  author = {{cookiecutter-cms developers}},
  year = {2022},
  url = {https://github.com/MolSSI/cookiecutter-cms}
}

@book{vanrossumPythonReferenceManual2009,
  title = {Python 3 {{Reference Manual}}},
  author = {Van Rossum, Guido and Drake, Fred L.},
  year = {2009},
  publisher = {{CreateSpace}},
  address = {{Scotts Valley, CA}},
  isbn = {1-4414-1269-7}
}

@article{carpenterStanProbabilisticProgramming2017,
  title = {Stan: {{A Probabilistic Programming Language}}},
  shorttitle = {Stan},
  author = {Carpenter, Bob and Gelman, Andrew and Hoffman, Matthew D. and Lee, Daniel and Goodrich, Ben and Betancourt, Michael and Brubaker, Marcus and Guo, Jiqiang and Li, Peter and Riddell, Allen},
  year = {2017},
  month = jan,
  journal = {Journal of Statistical Software},
  volume = {76},
  number = {1},
  pages = {1--32},
  issn = {1548-7660},
  doi = {10.18637/jss.v076.i01},
  url = {https://www.jstatsoft.org/index.php/jss/article/view/v076i01},
  urldate = {2020-08-27},
  copyright = {Copyright (c) 2017 Bob Carpenter, Andrew Gelman, Matthew D. Hoffman, Daniel Lee, Ben Goodrich, Michael Betancourt, Marcus Brubaker, Jiqiang Guo, Peter Li, Allen Riddell},
  langid = {english},
  keywords = {algorithmic differentiation,Bayesian inference,probabilistic programming,Stan},
  file = {/Users/tedgro/Documents/Reading/Zotero/storage/F4VI282K/Carpenter et al. - 2017 - Stan A Probabilistic Programming Language.pdf;/Users/tedgro/Documents/Reading/Zotero/storage/JNJQGTST/v076i01.html}
}

@article{gelmanBayesianWorkflow2020,
  title = {Bayesian {{Workflow}}},
  author = {Gelman, Andrew and Vehtari, Aki and Simpson, Daniel and Margossian, Charles C. and Carpenter, Bob and Yao, Yuling and Kennedy, Lauren and Gabry, Jonah and B{\"u}rkner, Paul-Christian and Modr{\'a}k, Martin},
  year = {2020},
  month = nov,
  journal = {arXiv:2011.01808 [stat]},
  eprint = {2011.01808},
  eprinttype = {arxiv},
  primaryclass = {stat},
  url = {http://arxiv.org/abs/2011.01808},
  urldate = {2020-11-05},
  abstract = {The Bayesian approach to data analysis provides a powerful way to handle uncertainty in all observations, model parameters, and model structure using probability theory. Probabilistic programming languages make it easier to specify and fit Bayesian models, but this still leaves us with many options regarding constructing, evaluating, and using these models, along with many remaining challenges in computation. Using Bayesian inference to solve real-world problems requires not only statistical skills, subject matter knowledge, and programming, but also awareness of the decisions made in the process of data analysis. All of these aspects can be understood as part of a tangled workflow of applied Bayesian statistics. Beyond inference, the workflow also includes iterative model building, model checking, validation and troubleshooting of computational problems, model understanding, and model comparison. We review all these aspects of workflow in the context of several examples, keeping in mind that in practice we will be fitting many models for any given problem, even if only a subset of them will ultimately be relevant for our conclusions.},
  archiveprefix = {arXiv},
  keywords = {Statistics - Methodology},
  file = {/Users/tedgro/Documents/Reading/Zotero/storage/XEI2Q7F4/Gelman et al. - 2020 - Bayesian Workflow.pdf;/Users/tedgro/Documents/Reading/Zotero/storage/8Y5YAYXE/2011.html}
}

@misc{greenfeldCookiecutter2021,
  title = {Cookiecutter},
  author = {Greenfeld, Audrey Roy and Greenfeld, Dainiel Roy and Pierzina, Raphael and {others}},
  year = {2021},
  month = may,
  url = {https://pypi.org/project/cookiecutter/}
}

@misc{standevelopmentteamCmdStanPy2022,
  title = {{{CmdStanPy}}},
  author = {{Stan Development Team}},
  year = {2022},
  url = {https://github.com/stan-dev/cmdstanpy}
}

@article{kumarArviZUnifiedLibrary2019,
  title = {{{ArviZ}} a Unified Library for Exploratory Analysis of {{Bayesian}} Models in {{Python}}},
  author = {Kumar, Ravin and Carroll, Colin and Hartikainen, Ari and Martin, Osvaldo},
  year = {2019},
  month = jan,
  journal = {Journal of Open Source Software},
  volume = {4},
  number = {33},
  pages = {1143},
  issn = {2475-9066},
  doi = {10.21105/joss.01143},
  url = {http://joss.theoj.org/papers/10.21105/joss.01143},
  urldate = {2021-12-02},
  abstract = {While conceptually simple, Bayesian methods can be mathematically and numerically challenging. Probabilistic programming languages (PPLs) implement functions to easily build Bayesian models together with efficient automatic inference methods. This helps separate the model building from the inference, allowing practitioners to focus on their specific problems and leaving PPLs to handle the computational details for them (Bessiere, Mazer, Ahuactzin, \& Mekhnacha, 2013; Daniel Roy, 2015; Ghahramani, 2015). The inference process generates a posterior distribution \textemdash{} which has a central role in Bayesian statistics \textemdash{} together with other distributions like the posterior predictive distribution and the prior predictive distribution. The correct visualization, analysis, and interpretation of these distributions is key to properly answer the questions that motivate the inference process.},
  langid = {english},
  file = {/Users/tedgro/Documents/Reading/Zotero/storage/HT4JS7NP/Kumar et al. - 2019 - ArviZ a unified library for exploratory analysis o.pdf}
}

@misc{georgbrandlandthesphinxteamSphinx2022,
  title = {Sphinx},
  author = {{Georg Brandl and the Sphinx team}},
  year = {2022},
  url = {https://www.sphinx-doc.org/}
}

@misc{pytestdevelopersPytest2022,
  title = {Pytest},
  author = {{pytest developers}},
  year = {2022},
  url = {https://pypi.org/project/pytest/},
  doi = {10.1007/978-1-4842-2677-3_5}
}

@misc{githubdevelopersGitHubActions2022,
  title = {{{GitHub Actions}}},
  author = {{GitHub developers}},
  year = {2022},
  url = {https://github.com/actions},
  howpublished = {GitHub}
}

@article{liepeFrameworkParameterEstimation2014,
  title = {A {{Framework}} for {{Parameter Estimation}} and {{Model Selection}} from {{Experimental Data}} in {{Systems Biology Using Approximate Bayesian Computation}}},
  author = {Liepe, Juliane and Kirk, Paul and Filippi, Sarah and Toni, Tina and Barnes, Chris P. and Stumpf, Michael P.H.},
  year = {2014},
  month = feb,
  journal = {Nature protocols},
  volume = {9},
  number = {2},
  pages = {439--456},
  issn = {1754-2189},
  doi = {10.1038/nprot.2014.025},
  url = {https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5081097/},
  urldate = {2022-07-25},
  abstract = {As modeling becomes a more widespread practice in the life- and biomedical sciences, we require reliable tools to calibrate models against ever more complex and detailed data. Here we present an approximate Bayesian computation framework and software environment, ABC-SysBio, which enables parameter estimation and model selection in the Bayesian formalism using Sequential Monte-Carlo approaches. We outline the underlying rationale, discuss the computational and practical issues, and provide detailed guidance as to how the important tasks of parameter inference and model selection can be carried out in practice. Unlike other available packages, ABC-SysBio is highly suited for investigating in particular the challenging problem of fitting stochastic models to data. Although computationally expensive, the additional insights gained in the Bayesian formalism more than make up for this cost, especially in complex problems.},
  pmcid = {PMC5081097},
  pmid = {24457334},
  file = {/Users/tedgro/Documents/Reading/Zotero/storage/T8RJ4CCF/Liepe et al. - 2014 - A Framework for Parameter Estimation and Model Sel.pdf}
}

@misc{Allaire_Quarto_2022,
  title = {Quarto},
  author = {Allaire, J.J. and Teague, Charles and Scheidegger, Carlos and Xie, Yihui and Dervieux, Christophe},
  year = {2022},
  month = jan,
  doi = {10.5281/zenodo.5960048},
  url = {https://github.com/quarto-dev/quarto-cli}
}

@article{burknerBrmsPackageBayesian2017,
  title = {Brms: {{An R}} Package for {{Bayesian}} Multilevel Models Using {{Stan}}},
  author = {B{\"u}rkner, Paul-Christian},
  year = {2017},
  journal = {Journal of Statistical Software},
  volume = {80},
  number = {1},
  pages = {1--28},
  doi = {10.18637/jss.v080.i01},
  encoding = {UTF-8}
}

@misc{capretto2020,
  title = {Bambi: {{A}} Simple Interface for Fitting {{Bayesian}} Linear Models in {{Python}}},
  author = {Capretto, Tom{\'a}s and Piho, Camen and Kumar, Ravin and Westfall, Jacob and Yarkoni, Tal and Martin, Osvaldo A.},
  year = {2020},
  eprint = {2012.10754},
  primaryclass = {stat.CO},
  archiveprefix = {arxiv}
}

@article{gabryVisualizationBayesianWorkflow2019,
  title = {Visualization in {{Bayesian Workflow}}},
  author = {Gabry, Jonah and Simpson, Daniel and Vehtari, Aki and Betancourt, Michael and Gelman, Andrew},
  year = {2019},
  month = feb,
  journal = {Journal of the Royal Statistical Society Series A: Statistics in Society},
  volume = {182},
  number = {2},
  pages = {389--402},
  issn = {0964-1998},
  doi = {10.1111/rssa.12378},
  url = {https://doi.org/10.1111/rssa.12378},
  urldate = {2023-07-14},
  abstract = {Bayesian data analysis is about more than just computing a posterior distribution, and Bayesian visualization is about more than trace plots of Markov chains. Practical Bayesian data analysis, like all data analysis, is an iterative process of model building, inference, model checking and evaluation, and model expansion. Visualization is helpful in each of these stages of the Bayesian workflow and it is indispensable when drawing inferences from the types of modern, high dimensional models that are used by applied researchers.},
  file = {/Users/tedgro/Zotero/storage/R7L5AZCN/Gabry et al. - 2019 - Visualization in Bayesian Workflow.pdf;/Users/tedgro/Zotero/storage/JLJT6FWE/7070184.html}
}


@article{grinsztajnBayesianWorkflowDisease2021,
  title = {Bayesian Workflow for Disease Transmission Modeling in {{Stan}}},
  author = {Grinsztajn, L{\'e}o and Semenova, Elizaveta and Margossian, Charles C. and Riou, Julien},
  year = {2021},
  journal = {Statistics in Medicine},
  volume = {40},
  number = {27},
  pages = {6209--6234},
  issn = {1097-0258},
  doi = {10.1002/sim.9164},
  url = {https://onlinelibrary.wiley.com/doi/abs/10.1002/sim.9164},
  urldate = {2022-03-14},
  abstract = {This tutorial shows how to build, fit, and criticize disease transmission models in Stan, and should be useful to researchers interested in modeling the severe acute respiratory syndrome coronavirus 2 (SARS-CoV-2) pandemic and other infectious diseases in a Bayesian framework. Bayesian modeling provides a principled way to quantify uncertainty and incorporate both data and prior knowledge into the model estimates. Stan is an expressive probabilistic programming language that abstracts the inference and allows users to focus on the modeling. As a result, Stan code is readable and easily extensible, which makes the modeler's work more transparent. Furthermore, Stan's main inference engine, Hamiltonian Monte Carlo sampling, is amiable to diagnostics, which means the user can verify whether the obtained inference is reliable. In this tutorial, we demonstrate how to formulate, fit, and diagnose a compartmental transmission model in Stan, first with a simple susceptible-infected-recovered model, then with a more elaborate transmission model used during the SARS-CoV-2 pandemic. We also cover advanced topics which can further help practitioners fit sophisticated models; notably, how to use simulations to probe the model and priors, and computational techniques to scale-up models based on ordinary differential equations.},
  langid = {english},
  keywords = {Bayesian workflow,compartmental models,epidemiology,infectious diseases},
  file = {/Users/tedgro/Zotero/storage/2A77N8Q5/Grinsztajn et al. - 2021 - Bayesian workflow for disease transmission modelin.pdf;/Users/tedgro/Zotero/storage/CD546SLU/sim.html}
}

@misc{pydanticdevelopersPydantic2022,
  title = {Pydantic},
  author = {{Pydantic developers}},
  year = {2022},
  url = {https://pypi.org/project/pydantic/}
}

@inproceedings{niels_bantilan-proc-scipy-2020,
  title = {Pandera: {{Statistical Data Validation}} of {{Pandas Dataframes}}},
  booktitle = {Proceedings of the 19th {{Python}} in {{Science Conference}}},
  author = {{Niels Bantilan}},
  editor = {Agarwal, Meghann and Calloway, Chris and Niederhut, Dillon and {David Shupe}},
  year = {2020},
  pages = {116--124},
  doi = {10.25080/Majora-342d178e-010}
}

@misc{clickdevelopersClickPythonComposable2022,
  title = {Click: {{Python}} Composable Command Line Interface Toolkit},
  author = {{Click Developers}},
  year = {2022},
  url = {https://pypi.org/project/click/},
  howpublished = {Pallets}
}

@article{stallman1991gnu,
  title = {{{GNU}} Make-{{A}} Program for Directing Recompilation},
  author = {Stallman, Richard M and McGrath, Roland},
  year = {1991},
  publisher = {{Citeseer}}
}
