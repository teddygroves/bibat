
// Code generated by stanc v2.30.1
#include <stan/model/model_header.hpp>
namespace multilevel_linear_regression_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 61> locations_array__ = 
{" (found before start of program)",
 " (in '/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/multilevel-linear-regression.stan', line 21, column 2 to column 9)",
 " (in '/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/multilevel-linear-regression.stan', line 22, column 2 to column 14)",
 " (in '/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/multilevel-linear-regression.stan', line 23, column 2 to column 22)",
 " (in '/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/multilevel-linear-regression.stan', line 34, column 2 to column 22)",
 " (in '/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/multilevel-linear-regression.stan', line 35, column 2 to column 22)",
 " (in '/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/multilevel-linear-regression.stan', line 37, column 4 to column 59)",
 " (in '/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/multilevel-linear-regression.stan', line 38, column 4 to column 76)",
 " (in '/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/multilevel-linear-regression.stan', line 36, column 21 to line 39, column 3)",
 " (in '/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/multilevel-linear-regression.stan', line 36, column 2 to line 39, column 3)",
 " (in '/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/multilevel-linear-regression.stan', line 26, column 2 to column 19)",
 " (in '/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/multilevel-linear-regression.stan', line 27, column 2 to column 19)",
 " (in '/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/multilevel-linear-regression.stan', line 28, column 2 to column 26)",
 " (in '/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/multilevel-linear-regression.stan', line 30, column 4 to column 62)",
 " (in '/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/multilevel-linear-regression.stan', line 29, column 17 to line 31, column 3)",
 " (in '/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/multilevel-linear-regression.stan', line 29, column 2 to line 31, column 3)",
 " (in '/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/multilevel-linear-regression.stan', line 7, column 2 to column 17)",
 " (in '/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/multilevel-linear-regression.stan', line 8, column 2 to column 23)",
 " (in '/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/multilevel-linear-regression.stan', line 9, column 2 to column 22)",
 " (in '/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/multilevel-linear-regression.stan', line 10, column 2 to column 17)",
 " (in '/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/multilevel-linear-regression.stan', line 11, column 9 to column 10)",
 " (in '/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/multilevel-linear-regression.stan', line 11, column 12 to column 13)",
 " (in '/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/multilevel-linear-regression.stan', line 11, column 2 to column 17)",
 " (in '/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/multilevel-linear-regression.stan', line 12, column 9 to column 10)",
 " (in '/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/multilevel-linear-regression.stan', line 12, column 2 to column 14)",
 " (in '/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/multilevel-linear-regression.stan', line 13, column 8 to column 15)",
 " (in '/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/multilevel-linear-regression.stan', line 13, column 2 to column 47)",
 " (in '/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/multilevel-linear-regression.stan', line 14, column 8 to column 14)",
 " (in '/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/multilevel-linear-regression.stan', line 14, column 2 to column 45)",
 " (in '/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/multilevel-linear-regression.stan', line 15, column 2 to column 34)",
 " (in '/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/multilevel-linear-regression.stan', line 18, column 9 to column 10)",
 " (in '/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/multilevel-linear-regression.stan', line 18, column 12 to column 13)",
 " (in '/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/multilevel-linear-regression.stan', line 18, column 2 to column 69)",
 " (in '/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/multilevel-linear-regression.stan', line 22, column 9 to column 10)",
 " (in '/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/multilevel-linear-regression.stan', line 34, column 9 to column 15)",
 " (in '/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/multilevel-linear-regression.stan', line 35, column 9 to column 15)",
 " (in '/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/custom_functions.stan', line 4, column 4, included from\n'/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/multilevel-linear-regression.stan', line 4, column 0)",
 " (in '/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/custom_functions.stan', line 3, column 52, included from\n'/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/multilevel-linear-regression.stan', line 4, column 0)",
 " (in '/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/custom_functions.stan', line 8, column 9, included from\n'/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/multilevel-linear-regression.stan', line 4, column 0)",
 " (in '/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/custom_functions.stan', line 8, column 18, included from\n'/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/multilevel-linear-regression.stan', line 4, column 0)",
 " (in '/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/custom_functions.stan', line 8, column 2, included from\n'/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/multilevel-linear-regression.stan', line 4, column 0)",
 " (in '/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/custom_functions.stan', line 10, column 4, included from\n'/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/multilevel-linear-regression.stan', line 4, column 0)",
 " (in '/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/custom_functions.stan', line 9, column 2, included from\n'/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/multilevel-linear-regression.stan', line 4, column 0)",
 " (in '/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/custom_functions.stan', line 11, column 2, included from\n'/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/multilevel-linear-regression.stan', line 4, column 0)",
 " (in '/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/custom_functions.stan', line 7, column 54, included from\n'/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/multilevel-linear-regression.stan', line 4, column 0)",
 " (in '/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/custom_functions.stan', line 15, column 2, included from\n'/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/multilevel-linear-regression.stan', line 4, column 0)",
 " (in '/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/custom_functions.stan', line 14, column 53, included from\n'/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/multilevel-linear-regression.stan', line 4, column 0)",
 " (in '/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/custom_functions.stan', line 19, column 2, included from\n'/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/multilevel-linear-regression.stan', line 4, column 0)",
 " (in '/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/custom_functions.stan', line 20, column 9, included from\n'/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/multilevel-linear-regression.stan', line 4, column 0)",
 " (in '/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/custom_functions.stan', line 20, column 2, included from\n'/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/multilevel-linear-regression.stan', line 4, column 0)",
 " (in '/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/custom_functions.stan', line 22, column 4, included from\n'/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/multilevel-linear-regression.stan', line 4, column 0)",
 " (in '/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/custom_functions.stan', line 21, column 2, included from\n'/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/multilevel-linear-regression.stan', line 4, column 0)",
 " (in '/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/custom_functions.stan', line 23, column 2, included from\n'/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/multilevel-linear-regression.stan', line 4, column 0)",
 " (in '/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/custom_functions.stan', line 18, column 26, included from\n'/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/multilevel-linear-regression.stan', line 4, column 0)",
 " (in '/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/custom_functions.stan', line 27, column 2, included from\n'/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/multilevel-linear-regression.stan', line 4, column 0)",
 " (in '/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/custom_functions.stan', line 28, column 9, included from\n'/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/multilevel-linear-regression.stan', line 4, column 0)",
 " (in '/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/custom_functions.stan', line 28, column 2, included from\n'/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/multilevel-linear-regression.stan', line 4, column 0)",
 " (in '/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/custom_functions.stan', line 30, column 4, included from\n'/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/multilevel-linear-regression.stan', line 4, column 0)",
 " (in '/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/custom_functions.stan', line 29, column 2, included from\n'/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/multilevel-linear-regression.stan', line 4, column 0)",
 " (in '/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/custom_functions.stan', line 31, column 2, included from\n'/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/multilevel-linear-regression.stan', line 4, column 0)",
 " (in '/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/custom_functions.stan', line 26, column 24, included from\n'/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan/multilevel-linear-regression.stan', line 4, column 0)"};

struct standardise_vector_functor__ {
  template <typename T0__, typename T1__, typename T2__,
            stan::require_all_t<stan::is_col_vector<T0__>,
                                stan::is_vt_not_complex<T0__>,
                                stan::is_stan_scalar<T1__>,
                                stan::is_stan_scalar<T2__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__, T2__>, -1, 1>
  operator()(const T0__& v, const T1__& mu, const T2__& s,
             std::ostream* pstream__) const;
};
struct standardise_cols_functor__ {
  template <typename T0__, typename T1__, typename T2__,
            stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                                stan::is_vt_not_complex<T0__>,
                                stan::is_col_vector<T1__>,
                                stan::is_vt_not_complex<T1__>,
                                stan::is_col_vector<T2__>,
                                stan::is_vt_not_complex<T2__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>,
                       stan::base_type_t<T2__>>, -1, -1>
  operator()(const T0__& m, const T1__& mu, const T2__& s,
             std::ostream* pstream__) const;
};
struct col_sds_functor__ {
  template <typename T0__,
            stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                                stan::is_vt_not_complex<T0__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>, -1, 1>
  operator()(const T0__& m, std::ostream* pstream__) const;
};
struct col_means_functor__ {
  template <typename T0__,
            stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                                stan::is_vt_not_complex<T0__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>, -1, 1>
  operator()(const T0__& m, std::ostream* pstream__) const;
};
struct unstandardise_vector_functor__ {
  template <typename T0__, typename T1__, typename T2__,
            stan::require_all_t<stan::is_col_vector<T0__>,
                                stan::is_vt_not_complex<T0__>,
                                stan::is_stan_scalar<T1__>,
                                stan::is_stan_scalar<T2__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__, T2__>, -1, 1>
  operator()(const T0__& v, const T1__& m, const T2__& s,
             std::ostream* pstream__) const;
};

template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__, T2__>, -1, 1>
  standardise_vector(const T0__& v_arg__, const T1__& mu, const T2__& s,
                     std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<stan::base_type_t<T0__>, T1__, T2__>;
    int current_statement__ = 0; 
    const auto& v = stan::math::to_ref(v_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      current_statement__ = 36;
      return stan::math::divide(stan::math::subtract(v, mu), (2 * s));
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>,
                     stan::base_type_t<T2__>>, -1, -1>
  standardise_cols(const T0__& m_arg__, const T1__& mu_arg__,
                   const T2__& s_arg__, std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<stan::base_type_t<T0__>,
                                 stan::base_type_t<T1__>,
                                 stan::base_type_t<T2__>>;
    int current_statement__ = 0; 
    const auto& m = stan::math::to_ref(m_arg__);
    const auto& mu = stan::math::to_ref(mu_arg__);
    const auto& s = stan::math::to_ref(s_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      current_statement__ = 38;
      stan::math::validate_non_negative_index("out", "rows(m)",
                                              stan::math::rows(m));
      current_statement__ = 39;
      stan::math::validate_non_negative_index("out", "cols(m)",
                                              stan::math::cols(m));
      Eigen::Matrix<local_scalar_t__, -1, -1> out =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(
           stan::math::rows(m), stan::math::cols(m), DUMMY_VAR__);
      current_statement__ = 42;
      for (int c = 1; c <= stan::math::cols(m); ++c) {
        current_statement__ = 41;
        stan::model::assign(out,
          standardise_vector(
            stan::model::rvalue(m, "m",
              stan::model::index_omni(), stan::model::index_uni(c)),
            stan::model::rvalue(mu, "mu", stan::model::index_uni(c)),
            stan::model::rvalue(s, "s", stan::model::index_uni(c)), pstream__),
          "assigning variable out", stan::model::index_omni(),
                                      stan::model::index_uni(c));
      }
      current_statement__ = 43;
      return out;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__, T2__>, -1, 1>
  unstandardise_vector(const T0__& v_arg__, const T1__& m, const T2__& s,
                       std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<stan::base_type_t<T0__>, T1__, T2__>;
    int current_statement__ = 0; 
    const auto& v = stan::math::to_ref(v_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      current_statement__ = 45;
      return stan::math::add(m,
               stan::math::multiply(stan::math::multiply(v, 2), s));
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>, -1, 1>
  col_means(const T0__& m_arg__, std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>>;
    int current_statement__ = 0; 
    const auto& m = stan::math::to_ref(m_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int C = std::numeric_limits<int>::min();
      current_statement__ = 47;
      C = stan::math::cols(m);
      current_statement__ = 48;
      stan::math::validate_non_negative_index("out", "C", C);
      Eigen::Matrix<local_scalar_t__, -1, 1> out =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(C, DUMMY_VAR__);
      current_statement__ = 51;
      for (int c = 1; c <= C; ++c) {
        current_statement__ = 50;
        stan::model::assign(out,
          stan::math::mean(
            stan::model::rvalue(m, "m",
              stan::model::index_omni(), stan::model::index_uni(c))),
          "assigning variable out", stan::model::index_uni(c));
      }
      current_statement__ = 52;
      return out;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>, -1, 1>
  col_sds(const T0__& m_arg__, std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>>;
    int current_statement__ = 0; 
    const auto& m = stan::math::to_ref(m_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int C = std::numeric_limits<int>::min();
      current_statement__ = 54;
      C = stan::math::cols(m);
      current_statement__ = 55;
      stan::math::validate_non_negative_index("out", "C", C);
      Eigen::Matrix<local_scalar_t__, -1, 1> out =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(C, DUMMY_VAR__);
      current_statement__ = 58;
      for (int c = 1; c <= C; ++c) {
        current_statement__ = 57;
        stan::model::assign(out,
          stan::math::sd(
            stan::model::rvalue(m, "m",
              stan::model::index_omni(), stan::model::index_uni(c))),
          "assigning variable out", stan::model::index_uni(c));
      }
      current_statement__ = 59;
      return out;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__, T2__>, -1, 1>
standardise_vector_functor__::operator()(const T0__& v, const T1__& mu,
                                         const T2__& s,
                                         std::ostream* pstream__)  const
{
  return standardise_vector(v, mu, s, pstream__);
}

template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>,
                     stan::base_type_t<T2__>>, -1, -1>
standardise_cols_functor__::operator()(const T0__& m, const T1__& mu,
                                       const T2__& s, std::ostream* pstream__) 
const
{
  return standardise_cols(m, mu, s, pstream__);
}

template <typename T0__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>, -1, 1>
col_sds_functor__::operator()(const T0__& m, std::ostream* pstream__)  const
{
  return col_sds(m, pstream__);
}

template <typename T0__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>, -1, 1>
col_means_functor__::operator()(const T0__& m, std::ostream* pstream__) 
const
{
  return col_means(m, pstream__);
}

template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__, T2__>, -1, 1>
unstandardise_vector_functor__::operator()(const T0__& v, const T1__& m,
                                           const T2__& s,
                                           std::ostream* pstream__)  const
{
  return unstandardise_vector(v, m, s, pstream__);
}


class multilevel_linear_regression_model final : public model_base_crtp<multilevel_linear_regression_model> {

 private:
  int N;
  int N_train;
  int N_test;
  int K;
  Eigen::Matrix<double, -1, -1> x_data__;
  Eigen::Matrix<double, -1, 1> y_data__;
  std::vector<int> ix_train;
  std::vector<int> ix_test;
  int likelihood;
  Eigen::Matrix<double, -1, -1> x_std_data__; 
  Eigen::Map<Eigen::Matrix<double, -1, -1>> x{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> y{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> x_std{nullptr, 0, 0};
 
 public:
  ~multilevel_linear_regression_model() { }
  
  inline std::string model_name() const final { return "multilevel_linear_regression_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.30.1", "stancflags = --warn-pedantic --include-paths=/Users/tedgro/Code/mbag/{{cookiecutter.repo_name}}/src/stan"};
  }
  
  
  multilevel_linear_regression_model(stan::io::var_context& context__,
                                     unsigned int random_seed__ = 0,
                                     std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "multilevel_linear_regression_model_namespace::multilevel_linear_regression_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 16;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      
      current_statement__ = 16;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 16;
      stan::math::check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 17;
      context__.validate_dims("data initialization","N_train","int",
           std::vector<size_t>{});
      N_train = std::numeric_limits<int>::min();
      
      
      current_statement__ = 17;
      N_train = context__.vals_i("N_train")[(1 - 1)];
      current_statement__ = 17;
      stan::math::check_greater_or_equal(function__, "N_train", N_train, 1);
      current_statement__ = 18;
      context__.validate_dims("data initialization","N_test","int",
           std::vector<size_t>{});
      N_test = std::numeric_limits<int>::min();
      
      
      current_statement__ = 18;
      N_test = context__.vals_i("N_test")[(1 - 1)];
      current_statement__ = 18;
      stan::math::check_greater_or_equal(function__, "N_test", N_test, 1);
      current_statement__ = 19;
      context__.validate_dims("data initialization","K","int",
           std::vector<size_t>{});
      K = std::numeric_limits<int>::min();
      
      
      current_statement__ = 19;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 19;
      stan::math::check_greater_or_equal(function__, "K", K, 1);
      current_statement__ = 20;
      stan::math::validate_non_negative_index("x", "N", N);
      current_statement__ = 21;
      stan::math::validate_non_negative_index("x", "K", K);
      current_statement__ = 22;
      context__.validate_dims("data initialization","x","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(K)});
      x_data__ = 
        Eigen::Matrix<double, -1, -1>::Constant(N, K,
          std::numeric_limits<double>::quiet_NaN());
      new (&x) Eigen::Map<Eigen::Matrix<double, -1, -1>>(x_data__.data(), N, K);
        
      
      {
        std::vector<local_scalar_t__> x_flat__;
        current_statement__ = 22;
        x_flat__ = context__.vals_r("x");
        current_statement__ = 22;
        pos__ = 1;
        current_statement__ = 22;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 22;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 22;
            stan::model::assign(x, x_flat__[(pos__ - 1)],
              "assigning variable x", stan::model::index_uni(sym2__),
                                        stan::model::index_uni(sym1__));
            current_statement__ = 22;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 23;
      stan::math::validate_non_negative_index("y", "N", N);
      current_statement__ = 24;
      context__.validate_dims("data initialization","y","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      y_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&y) Eigen::Map<Eigen::Matrix<double, -1, 1>>(y_data__.data(), N);
      
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 24;
        y_flat__ = context__.vals_r("y");
        current_statement__ = 24;
        pos__ = 1;
        current_statement__ = 24;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 24;
          stan::model::assign(y, y_flat__[(pos__ - 1)],
            "assigning variable y", stan::model::index_uni(sym1__));
          current_statement__ = 24;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 25;
      stan::math::validate_non_negative_index("ix_train", "N_train", N_train);
      current_statement__ = 26;
      context__.validate_dims("data initialization","ix_train","int",
           std::vector<size_t>{static_cast<size_t>(N_train)});
      ix_train = std::vector<int>(N_train, std::numeric_limits<int>::min());
      
      
      current_statement__ = 26;
      ix_train = context__.vals_i("ix_train");
      current_statement__ = 26;
      stan::math::check_greater_or_equal(function__, "ix_train", ix_train, 1);
      current_statement__ = 26;
      stan::math::check_less_or_equal(function__, "ix_train", ix_train, N);
      current_statement__ = 27;
      stan::math::validate_non_negative_index("ix_test", "N_test", N_test);
      current_statement__ = 28;
      context__.validate_dims("data initialization","ix_test","int",
           std::vector<size_t>{static_cast<size_t>(N_test)});
      ix_test = std::vector<int>(N_test, std::numeric_limits<int>::min());
      
      
      current_statement__ = 28;
      ix_test = context__.vals_i("ix_test");
      current_statement__ = 28;
      stan::math::check_greater_or_equal(function__, "ix_test", ix_test, 1);
      current_statement__ = 28;
      stan::math::check_less_or_equal(function__, "ix_test", ix_test, N);
      current_statement__ = 29;
      context__.validate_dims("data initialization","likelihood","int",
           std::vector<size_t>{});
      likelihood = std::numeric_limits<int>::min();
      
      
      current_statement__ = 29;
      likelihood = context__.vals_i("likelihood")[(1 - 1)];
      current_statement__ = 29;
      stan::math::check_greater_or_equal(function__, "likelihood",
                                            likelihood, 0);
      current_statement__ = 29;
      stan::math::check_less_or_equal(function__, "likelihood", likelihood, 1);
      current_statement__ = 30;
      stan::math::validate_non_negative_index("x_std", "N", N);
      current_statement__ = 31;
      stan::math::validate_non_negative_index("x_std", "K", K);
      current_statement__ = 32;
      x_std_data__ = 
        Eigen::Matrix<double, -1, -1>::Constant(N, K,
          std::numeric_limits<double>::quiet_NaN());
      new (&x_std) Eigen::Map<Eigen::Matrix<double, -1, -1>>(x_std_data__.data(), N, K);
        
      
      current_statement__ = 32;
      stan::model::assign(x_std,
        standardise_cols(x, col_means(x, pstream__),
          col_sds(x, pstream__), pstream__), "assigning variable x_std");
      current_statement__ = 33;
      stan::math::validate_non_negative_index("b", "K", K);
      current_statement__ = 34;
      stan::math::validate_non_negative_index("yrep", "N_test", N_test);
      current_statement__ = 35;
      stan::math::validate_non_negative_index("llik", "N_test", N_test);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + K + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "multilevel_linear_regression_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ a = DUMMY_VAR__;
      current_statement__ = 1;
      a = in__.template read<local_scalar_t__>();
      Eigen::Matrix<local_scalar_t__, -1, 1> b =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 2;
      b = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(K);
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 3;
      sigma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      {
        current_statement__ = 10;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(a, 0, 1));
        current_statement__ = 11;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(b, 0, 1));
        current_statement__ = 12;
        lp_accum__.add(stan::math::lognormal_lpdf<propto__>(sigma, 0, 1));
        current_statement__ = 15;
        if (likelihood) {
          current_statement__ = 13;
          lp_accum__.add(
            stan::math::normal_id_glm_lpdf<propto__>(
              stan::model::rvalue(y, "y", stan::model::index_multi(ix_train)),
              stan::model::rvalue(x_std, "x_std",
                stan::model::index_multi(ix_train)), a, b, sigma));
        } 
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "multilevel_linear_regression_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double a = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      a = in__.template read<local_scalar_t__>();
      Eigen::Matrix<double, -1, 1> b =
         Eigen::Matrix<double, -1, 1>::Constant(K,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      b = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(K);
      double sigma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      sigma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      out__.write(a);
      out__.write(b);
      out__.write(sigma);
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, 1> yrep =
         Eigen::Matrix<double, -1, 1>::Constant(N_test,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> llik =
         Eigen::Matrix<double, -1, 1>::Constant(N_test,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 9;
      for (int n = 1; n <= N_test; ++n) {
        current_statement__ = 6;
        stan::model::assign(yrep,
          stan::math::normal_rng(
            (a +
              stan::math::multiply(
                stan::model::rvalue(x_std, "x_std",
                  stan::model::index_uni(stan::model::rvalue(ix_test,
                                           "ix_test",
                                           stan::model::index_uni(n)))), b)),
            sigma, base_rng__),
          "assigning variable yrep", stan::model::index_uni(n));
        current_statement__ = 7;
        stan::model::assign(llik,
          stan::math::normal_lpdf<false>(
            stan::model::rvalue(y, "y",
              stan::model::index_uni(stan::model::rvalue(ix_test, "ix_test",
                                       stan::model::index_uni(n)))),
            (a +
              stan::math::multiply(
                stan::model::rvalue(x_std, "x_std",
                  stan::model::index_uni(stan::model::rvalue(ix_test,
                                           "ix_test",
                                           stan::model::index_uni(n)))), b)),
            sigma), "assigning variable llik", stan::model::index_uni(n));
      }
      out__.write(yrep);
      out__.write(llik);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ a = DUMMY_VAR__;
      a = in__.read<local_scalar_t__>();
      out__.write(a);
      Eigen::Matrix<local_scalar_t__, -1, 1> b =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        stan::model::assign(b, in__.read<local_scalar_t__>(),
          "assigning variable b", stan::model::index_uni(sym1__));
      }
      out__.write(b);
      local_scalar_t__ sigma = DUMMY_VAR__;
      sigma = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"a", "b", "sigma", "yrep", "llik"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(K)}, std::vector<size_t>{
      }, std::vector<size_t>{static_cast<size_t>(N_test)},
      std::vector<size_t>{static_cast<size_t>(N_test)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "a");
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "b" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "sigma");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N_test; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "yrep" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_test; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "llik" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "a");
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "b" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "sigma");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N_test; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "yrep" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_test; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "llik" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"a\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"yrep\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_test) + "},\"block\":\"generated_quantities\"},{\"name\":\"llik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_test) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"a\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"yrep\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_test) + "},\"block\":\"generated_quantities\"},{\"name\":\"llik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_test) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((1 + K) + 1);
      const size_t num_transformed = emit_transformed_parameters * 0;
      const size_t num_gen_quantities = emit_generated_quantities * 
  (N_test + N_test);
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      std::vector<int> params_i;
      vars = Eigen::Matrix<double, Eigen::Dynamic, 1>::Constant(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((1 + K) + 1);
      const size_t num_transformed = emit_transformed_parameters * 0;
      const size_t num_gen_quantities = emit_generated_quantities * 
  (N_test + N_test);
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      vars = std::vector<double>(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 3> names__{"a", "b", "sigma"};
      const std::array<Eigen::Index, 3> constrain_param_sizes__{1, K, 1};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
     }; } 
using stan_model = multilevel_linear_regression_model_namespace::multilevel_linear_regression_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return multilevel_linear_regression_model_namespace::profiles__;
}

#endif


